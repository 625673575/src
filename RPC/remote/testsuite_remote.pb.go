// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testsuite_remote.proto

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	testsuite_remote.proto

It has these top-level messages:
	Log
	ScreenArea
	CmdRequest
	LogReply
	ImageData
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LOG_TYPE int32

const (
	LOG_TYPE_Debug   LOG_TYPE = 0
	LOG_TYPE_Warning LOG_TYPE = 1
	LOG_TYPE_Error   LOG_TYPE = 2
)

var LOG_TYPE_name = map[int32]string{
	0: "Debug",
	1: "Warning",
	2: "Error",
}
var LOG_TYPE_value = map[string]int32{
	"Debug":   0,
	"Warning": 1,
	"Error":   2,
}

func (x LOG_TYPE) String() string {
	return proto.EnumName(LOG_TYPE_name, int32(x))
}
func (LOG_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Log struct {
	LogType LOG_TYPE `protobuf:"varint,1,opt,name=LogType,enum=remote.LOG_TYPE" json:"LogType,omitempty"`
	Content string   `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Log) GetLogType() LOG_TYPE {
	if m != nil {
		return m.LogType
	}
	return LOG_TYPE_Debug
}

func (m *Log) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ScreenArea struct {
	FullScreen bool  `protobuf:"varint,1,opt,name=FullScreen" json:"FullScreen,omitempty"`
	X          int32 `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y          int32 `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
	W          int32 `protobuf:"varint,4,opt,name=w" json:"w,omitempty"`
	H          int32 `protobuf:"varint,5,opt,name=h" json:"h,omitempty"`
}

func (m *ScreenArea) Reset()                    { *m = ScreenArea{} }
func (m *ScreenArea) String() string            { return proto.CompactTextString(m) }
func (*ScreenArea) ProtoMessage()               {}
func (*ScreenArea) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScreenArea) GetFullScreen() bool {
	if m != nil {
		return m.FullScreen
	}
	return false
}

func (m *ScreenArea) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ScreenArea) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *ScreenArea) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *ScreenArea) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

// Request
type CmdRequest struct {
	Cmd  string   `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=Args" json:"Args,omitempty"`
}

func (m *CmdRequest) Reset()                    { *m = CmdRequest{} }
func (m *CmdRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdRequest) ProtoMessage()               {}
func (*CmdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CmdRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

// Reply
type LogReply struct {
	Logs []*Log `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *LogReply) Reset()                    { *m = LogReply{} }
func (m *LogReply) String() string            { return proto.CompactTextString(m) }
func (*LogReply) ProtoMessage()               {}
func (*LogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogReply) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ImageData struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ImageData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Log)(nil), "remote.Log")
	proto.RegisterType((*ScreenArea)(nil), "remote.ScreenArea")
	proto.RegisterType((*CmdRequest)(nil), "remote.CmdRequest")
	proto.RegisterType((*LogReply)(nil), "remote.LogReply")
	proto.RegisterType((*ImageData)(nil), "remote.ImageData")
	proto.RegisterEnum("remote.LOG_TYPE", LOG_TYPE_name, LOG_TYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteService service

type RemoteServiceClient interface {
	ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*LogReply, error)
	CaptureScreen(ctx context.Context, in *ScreenArea, opts ...grpc.CallOption) (*ImageData, error)
}

type remoteServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteServiceClient(cc *grpc.ClientConn) RemoteServiceClient {
	return &remoteServiceClient{cc}
}

func (c *remoteServiceClient) ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ExecCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) CaptureScreen(ctx context.Context, in *ScreenArea, opts ...grpc.CallOption) (*ImageData, error) {
	out := new(ImageData)
	err := grpc.Invoke(ctx, "/remote.RemoteService/CaptureScreen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteService service

type RemoteServiceServer interface {
	ExecCmd(context.Context, *CmdRequest) (*LogReply, error)
	CaptureScreen(context.Context, *ScreenArea) (*ImageData, error)
}

func RegisterRemoteServiceServer(s *grpc.Server, srv RemoteServiceServer) {
	s.RegisterService(&_RemoteService_serviceDesc, srv)
}

func _RemoteService_ExecCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ExecCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ExecCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ExecCmd(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_CaptureScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenArea)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).CaptureScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/CaptureScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).CaptureScreen(ctx, req.(*ScreenArea))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteService",
	HandlerType: (*RemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCmd",
			Handler:    _RemoteService_ExecCmd_Handler,
		},
		{
			MethodName: "CaptureScreen",
			Handler:    _RemoteService_CaptureScreen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testsuite_remote.proto",
}

func init() { proto.RegisterFile("testsuite_remote.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0xcf, 0x9a, 0x40,
	0x10, 0xc5, 0x45, 0xf4, 0x43, 0x46, 0x6d, 0xe8, 0x1e, 0x9a, 0x8d, 0x87, 0x4a, 0x38, 0x11, 0x9b,
	0x9a, 0x94, 0x5e, 0x7a, 0x35, 0x68, 0x9b, 0xa6, 0x24, 0x6d, 0x56, 0x93, 0xa6, 0x27, 0x83, 0x3a,
	0x59, 0x4d, 0x84, 0xa5, 0xcb, 0x52, 0x25, 0xe9, 0x1f, 0xff, 0x65, 0x17, 0x51, 0x4f, 0xcc, 0xef,
	0x31, 0xbc, 0x79, 0x33, 0xc0, 0x3b, 0x85, 0xa5, 0x2a, 0xab, 0x93, 0xc2, 0xad, 0xc4, 0x4c, 0x28,
	0x9c, 0x17, 0x52, 0x28, 0x41, 0x5e, 0x1a, 0x0a, 0x7e, 0x80, 0x9d, 0x08, 0x4e, 0x66, 0xe0, 0x24,
	0x82, 0x6f, 0xea, 0x02, 0xa9, 0xe5, 0x5b, 0xe1, 0x9b, 0xc8, 0x9b, 0xdf, 0xda, 0x93, 0x9f, 0xdf,
	0xb6, 0x9b, 0x3f, 0xbf, 0x56, 0xac, 0x6d, 0x20, 0x14, 0x9c, 0x58, 0xe4, 0x0a, 0x73, 0x45, 0xbb,
	0xbe, 0x15, 0xba, 0xac, 0xc5, 0xe0, 0x00, 0xb0, 0xde, 0x4b, 0xc4, 0x7c, 0x21, 0x31, 0x25, 0xef,
	0x01, 0xbe, 0x56, 0xe7, 0x73, 0xa3, 0x18, 0xdb, 0x01, 0x7b, 0x52, 0xc8, 0x08, 0xac, 0xab, 0x71,
	0xe8, 0x33, 0xeb, 0xaa, 0xa9, 0xa6, 0x76, 0x43, 0xb5, 0xa6, 0x0b, 0xed, 0x35, 0x74, 0xd1, 0x74,
	0xa4, 0xfd, 0x86, 0x8e, 0x41, 0x04, 0x10, 0x67, 0x07, 0x86, 0x7f, 0x2b, 0x2c, 0x15, 0xf1, 0xc0,
	0x8e, 0xb3, 0x83, 0xb1, 0x77, 0x99, 0x2e, 0x09, 0x81, 0xde, 0x42, 0xf2, 0x92, 0x76, 0x7d, 0x3b,
	0x74, 0x99, 0xa9, 0x83, 0x0f, 0x30, 0x48, 0x04, 0x67, 0x58, 0x9c, 0x6b, 0x32, 0x85, 0x5e, 0x22,
	0x78, 0x49, 0x2d, 0xdf, 0x0e, 0x87, 0xd1, 0xf0, 0xbe, 0xa8, 0xe0, 0xcc, 0xbc, 0x08, 0xa6, 0xe0,
	0x7e, 0xcf, 0x52, 0x8e, 0xcb, 0x54, 0xa5, 0xda, 0x4d, 0x3f, 0xcd, 0x80, 0x11, 0x33, 0xf5, 0xec,
	0x23, 0x0c, 0xda, 0xb3, 0x10, 0x17, 0xfa, 0x4b, 0xdc, 0x55, 0xdc, 0xeb, 0x90, 0x21, 0x38, 0xbf,
	0x53, 0x99, 0x9f, 0x72, 0xee, 0x59, 0x5a, 0x5f, 0x49, 0x29, 0xa4, 0xd7, 0x8d, 0xfe, 0xc3, 0x98,
	0x99, 0x19, 0x6b, 0x94, 0xff, 0x4e, 0x7b, 0x24, 0x9f, 0xc0, 0x59, 0x5d, 0x71, 0x6f, 0xc2, 0xb6,
	0xe3, 0x1f, 0x2b, 0x4d, 0xbc, 0xe7, 0x48, 0x3a, 0x72, 0xd0, 0x21, 0x5f, 0x60, 0x1c, 0xa7, 0x85,
	0xaa, 0x24, 0xde, 0xae, 0x77, 0xff, 0xf0, 0x71, 0xf1, 0xc9, 0xdb, 0x56, 0xbb, 0xc7, 0x0f, 0x3a,
	0xbb, 0x17, 0xf3, 0xc3, 0x3f, 0xbf, 0x06, 0x00, 0x00, 0xff, 0xff, 0x58, 0xf2, 0x08, 0x0e, 0x0a,
	0x02, 0x00, 0x00,
}
