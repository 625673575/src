// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testsuite_remote.proto

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	testsuite_remote.proto

It has these top-level messages:
	Log
	Nil
	CaptureParams
	CmdRequest
	MouseClickRequest
	MouseMoveRequest
	KeyTapRequest
	KeyListTapRequest
	LogReply
	ImageData
	MousePosition
	FileEntry
	FileEntrys
	FileData
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LOG_TYPE int32

const (
	LOG_TYPE_Debug   LOG_TYPE = 0
	LOG_TYPE_Warning LOG_TYPE = 1
	LOG_TYPE_Error   LOG_TYPE = 2
)

var LOG_TYPE_name = map[int32]string{
	0: "Debug",
	1: "Warning",
	2: "Error",
}
var LOG_TYPE_value = map[string]int32{
	"Debug":   0,
	"Warning": 1,
	"Error":   2,
}

func (x LOG_TYPE) String() string {
	return proto.EnumName(LOG_TYPE_name, int32(x))
}
func (LOG_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MouseButtons int32

const (
	MouseButtons_None     MouseButtons = 0
	MouseButtons_Left     MouseButtons = 1048576
	MouseButtons_Right    MouseButtons = 2097152
	MouseButtons_Middle   MouseButtons = 4194304
	MouseButtons_XButton1 MouseButtons = 8388608
	MouseButtons_XButton2 MouseButtons = 16777216
)

var MouseButtons_name = map[int32]string{
	0:        "None",
	1048576:  "Left",
	2097152:  "Right",
	4194304:  "Middle",
	8388608:  "XButton1",
	16777216: "XButton2",
}
var MouseButtons_value = map[string]int32{
	"None":     0,
	"Left":     1048576,
	"Right":    2097152,
	"Middle":   4194304,
	"XButton1": 8388608,
	"XButton2": 16777216,
}

func (x MouseButtons) String() string {
	return proto.EnumName(MouseButtons_name, int32(x))
}
func (MouseButtons) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Log struct {
	LogType LOG_TYPE `protobuf:"varint,1,opt,name=LogType,enum=remote.LOG_TYPE" json:"LogType,omitempty"`
	Content string   `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Log) GetLogType() LOG_TYPE {
	if m != nil {
		return m.LogType
	}
	return LOG_TYPE_Debug
}

func (m *Log) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type Nil struct {
}

func (m *Nil) Reset()                    { *m = Nil{} }
func (m *Nil) String() string            { return proto.CompactTextString(m) }
func (*Nil) ProtoMessage()               {}
func (*Nil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CaptureParams struct {
	FullScreen bool  `protobuf:"varint,1,opt,name=FullScreen" json:"FullScreen,omitempty"`
	X          int32 `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y          int32 `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
	W          int32 `protobuf:"varint,4,opt,name=w" json:"w,omitempty"`
	H          int32 `protobuf:"varint,5,opt,name=h" json:"h,omitempty"`
	Quality    int32 `protobuf:"varint,6,opt,name=Quality" json:"Quality,omitempty"`
}

func (m *CaptureParams) Reset()                    { *m = CaptureParams{} }
func (m *CaptureParams) String() string            { return proto.CompactTextString(m) }
func (*CaptureParams) ProtoMessage()               {}
func (*CaptureParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CaptureParams) GetFullScreen() bool {
	if m != nil {
		return m.FullScreen
	}
	return false
}

func (m *CaptureParams) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *CaptureParams) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *CaptureParams) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *CaptureParams) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *CaptureParams) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// Request
type CmdRequest struct {
	Cmd  string   `protobuf:"bytes,1,opt,name=Cmd" json:"Cmd,omitempty"`
	Args []string `protobuf:"bytes,2,rep,name=Args" json:"Args,omitempty"`
}

func (m *CmdRequest) Reset()                    { *m = CmdRequest{} }
func (m *CmdRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdRequest) ProtoMessage()               {}
func (*CmdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CmdRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *CmdRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type MouseClickRequest struct {
	X           int32        `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y           int32        `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	DoubleClick bool         `protobuf:"varint,3,opt,name=DoubleClick" json:"DoubleClick,omitempty"`
	Button      MouseButtons `protobuf:"varint,4,opt,name=Button,enum=remote.MouseButtons" json:"Button,omitempty"`
}

func (m *MouseClickRequest) Reset()                    { *m = MouseClickRequest{} }
func (m *MouseClickRequest) String() string            { return proto.CompactTextString(m) }
func (*MouseClickRequest) ProtoMessage()               {}
func (*MouseClickRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MouseClickRequest) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MouseClickRequest) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MouseClickRequest) GetDoubleClick() bool {
	if m != nil {
		return m.DoubleClick
	}
	return false
}

func (m *MouseClickRequest) GetButton() MouseButtons {
	if m != nil {
		return m.Button
	}
	return MouseButtons_None
}

type MouseMoveRequest struct {
	X    int32   `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y    int32   `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Low  float32 `protobuf:"fixed32,3,opt,name=Low" json:"Low,omitempty"`
	High float32 `protobuf:"fixed32,4,opt,name=High" json:"High,omitempty"`
}

func (m *MouseMoveRequest) Reset()                    { *m = MouseMoveRequest{} }
func (m *MouseMoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MouseMoveRequest) ProtoMessage()               {}
func (*MouseMoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MouseMoveRequest) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MouseMoveRequest) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *MouseMoveRequest) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *MouseMoveRequest) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

type KeyTapRequest struct {
	KeyCode []string `protobuf:"bytes,1,rep,name=KeyCode" json:"KeyCode,omitempty"`
	Delay   float32  `protobuf:"fixed32,2,opt,name=Delay" json:"Delay,omitempty"`
}

func (m *KeyTapRequest) Reset()                    { *m = KeyTapRequest{} }
func (m *KeyTapRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyTapRequest) ProtoMessage()               {}
func (*KeyTapRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *KeyTapRequest) GetKeyCode() []string {
	if m != nil {
		return m.KeyCode
	}
	return nil
}

func (m *KeyTapRequest) GetDelay() float32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

type KeyListTapRequest struct {
	Keys []*KeyTapRequest `protobuf:"bytes,1,rep,name=Keys" json:"Keys,omitempty"`
}

func (m *KeyListTapRequest) Reset()                    { *m = KeyListTapRequest{} }
func (m *KeyListTapRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyListTapRequest) ProtoMessage()               {}
func (*KeyListTapRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *KeyListTapRequest) GetKeys() []*KeyTapRequest {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Reply
type LogReply struct {
	Logs []*Log `protobuf:"bytes,1,rep,name=Logs" json:"Logs,omitempty"`
}

func (m *LogReply) Reset()                    { *m = LogReply{} }
func (m *LogReply) String() string            { return proto.CompactTextString(m) }
func (*LogReply) ProtoMessage()               {}
func (*LogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LogReply) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type ImageData struct {
	TimeStamp int64  `protobuf:"varint,1,opt,name=TimeStamp" json:"TimeStamp,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ImageData) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *ImageData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MousePosition struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *MousePosition) Reset()                    { *m = MousePosition{} }
func (m *MousePosition) String() string            { return proto.CompactTextString(m) }
func (*MousePosition) ProtoMessage()               {}
func (*MousePosition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MousePosition) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *MousePosition) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// File
type FileEntry struct {
	IsDir    bool   `protobuf:"varint,1,opt,name=IsDir" json:"IsDir,omitempty"`
	FullName string `protobuf:"bytes,2,opt,name=FullName" json:"FullName,omitempty"`
	ModeTime int64  `protobuf:"varint,3,opt,name=ModeTime" json:"ModeTime,omitempty"`
}

func (m *FileEntry) Reset()                    { *m = FileEntry{} }
func (m *FileEntry) String() string            { return proto.CompactTextString(m) }
func (*FileEntry) ProtoMessage()               {}
func (*FileEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FileEntry) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *FileEntry) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *FileEntry) GetModeTime() int64 {
	if m != nil {
		return m.ModeTime
	}
	return 0
}

type FileEntrys struct {
	Count  int32        `protobuf:"varint,1,opt,name=Count" json:"Count,omitempty"`
	Entrys []*FileEntry `protobuf:"bytes,2,rep,name=Entrys" json:"Entrys,omitempty"`
}

func (m *FileEntrys) Reset()                    { *m = FileEntrys{} }
func (m *FileEntrys) String() string            { return proto.CompactTextString(m) }
func (*FileEntrys) ProtoMessage()               {}
func (*FileEntrys) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FileEntrys) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FileEntrys) GetEntrys() []*FileEntry {
	if m != nil {
		return m.Entrys
	}
	return nil
}

type FileData struct {
	FullName string `protobuf:"bytes,1,opt,name=FullName" json:"FullName,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *FileData) Reset()                    { *m = FileData{} }
func (m *FileData) String() string            { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()               {}
func (*FileData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FileData) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *FileData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Log)(nil), "remote.Log")
	proto.RegisterType((*Nil)(nil), "remote.Nil")
	proto.RegisterType((*CaptureParams)(nil), "remote.CaptureParams")
	proto.RegisterType((*CmdRequest)(nil), "remote.CmdRequest")
	proto.RegisterType((*MouseClickRequest)(nil), "remote.MouseClickRequest")
	proto.RegisterType((*MouseMoveRequest)(nil), "remote.MouseMoveRequest")
	proto.RegisterType((*KeyTapRequest)(nil), "remote.KeyTapRequest")
	proto.RegisterType((*KeyListTapRequest)(nil), "remote.KeyListTapRequest")
	proto.RegisterType((*LogReply)(nil), "remote.LogReply")
	proto.RegisterType((*ImageData)(nil), "remote.ImageData")
	proto.RegisterType((*MousePosition)(nil), "remote.MousePosition")
	proto.RegisterType((*FileEntry)(nil), "remote.FileEntry")
	proto.RegisterType((*FileEntrys)(nil), "remote.FileEntrys")
	proto.RegisterType((*FileData)(nil), "remote.FileData")
	proto.RegisterEnum("remote.LOG_TYPE", LOG_TYPE_name, LOG_TYPE_value)
	proto.RegisterEnum("remote.MouseButtons", MouseButtons_name, MouseButtons_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteService service

type RemoteServiceClient interface {
	ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*LogReply, error)
	CaptureScreen(ctx context.Context, in *CaptureParams, opts ...grpc.CallOption) (*ImageData, error)
	MouseClick(ctx context.Context, in *MouseClickRequest, opts ...grpc.CallOption) (*Log, error)
	KeyTap(ctx context.Context, in *KeyTapRequest, opts ...grpc.CallOption) (*Log, error)
	KeyListTap(ctx context.Context, in *KeyListTapRequest, opts ...grpc.CallOption) (*Log, error)
	GetMousePosition(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*MousePosition, error)
	ListDir(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*FileEntrys, error)
	ListDisk(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Log, error)
	ReadFile(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*FileData, error)
	ReadText(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error)
	CreateFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*Log, error)
	CreateText(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error)
	Rename(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error)
	DeleteFile(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error)
	DeleteFolder(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error)
}

type remoteServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteServiceClient(cc *grpc.ClientConn) RemoteServiceClient {
	return &remoteServiceClient{cc}
}

func (c *remoteServiceClient) ExecCmd(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*LogReply, error) {
	out := new(LogReply)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ExecCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) CaptureScreen(ctx context.Context, in *CaptureParams, opts ...grpc.CallOption) (*ImageData, error) {
	out := new(ImageData)
	err := grpc.Invoke(ctx, "/remote.RemoteService/CaptureScreen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) MouseClick(ctx context.Context, in *MouseClickRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/MouseClick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) KeyTap(ctx context.Context, in *KeyTapRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/KeyTap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) KeyListTap(ctx context.Context, in *KeyListTapRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/KeyListTap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) GetMousePosition(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*MousePosition, error) {
	out := new(MousePosition)
	err := grpc.Invoke(ctx, "/remote.RemoteService/GetMousePosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) ListDir(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*FileEntrys, error) {
	out := new(FileEntrys)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ListDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) ListDisk(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ListDisk", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) ReadFile(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*FileData, error) {
	out := new(FileData)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ReadFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) ReadText(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/ReadText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) CreateFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/CreateFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) CreateText(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/CreateText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) Rename(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) DeleteFile(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServiceClient) DeleteFolder(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := grpc.Invoke(ctx, "/remote.RemoteService/DeleteFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RemoteService service

type RemoteServiceServer interface {
	ExecCmd(context.Context, *CmdRequest) (*LogReply, error)
	CaptureScreen(context.Context, *CaptureParams) (*ImageData, error)
	MouseClick(context.Context, *MouseClickRequest) (*Log, error)
	KeyTap(context.Context, *KeyTapRequest) (*Log, error)
	KeyListTap(context.Context, *KeyListTapRequest) (*Log, error)
	GetMousePosition(context.Context, *Nil) (*MousePosition, error)
	ListDir(context.Context, *CmdRequest) (*FileEntrys, error)
	ListDisk(context.Context, *Nil) (*Log, error)
	ReadFile(context.Context, *CmdRequest) (*FileData, error)
	ReadText(context.Context, *CmdRequest) (*Log, error)
	CreateFile(context.Context, *FileData) (*Log, error)
	CreateText(context.Context, *CmdRequest) (*Log, error)
	Rename(context.Context, *CmdRequest) (*Log, error)
	DeleteFile(context.Context, *CmdRequest) (*Log, error)
	DeleteFolder(context.Context, *CmdRequest) (*Log, error)
}

func RegisterRemoteServiceServer(s *grpc.Server, srv RemoteServiceServer) {
	s.RegisterService(&_RemoteService_serviceDesc, srv)
}

func _RemoteService_ExecCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ExecCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ExecCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ExecCmd(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_CaptureScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).CaptureScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/CaptureScreen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).CaptureScreen(ctx, req.(*CaptureParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_MouseClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MouseClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).MouseClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/MouseClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).MouseClick(ctx, req.(*MouseClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_KeyTap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyTapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).KeyTap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/KeyTap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).KeyTap(ctx, req.(*KeyTapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_KeyListTap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyListTapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).KeyListTap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/KeyListTap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).KeyListTap(ctx, req.(*KeyListTapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_GetMousePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).GetMousePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/GetMousePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).GetMousePosition(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ListDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ListDir(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_ListDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ListDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ListDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ListDisk(ctx, req.(*Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ReadFile(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_ReadText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).ReadText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/ReadText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).ReadText(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).CreateFile(ctx, req.(*FileData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_CreateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).CreateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/CreateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).CreateText(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).Rename(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).DeleteFile(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteService_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServiceServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteService/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServiceServer).DeleteFolder(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RemoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteService",
	HandlerType: (*RemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCmd",
			Handler:    _RemoteService_ExecCmd_Handler,
		},
		{
			MethodName: "CaptureScreen",
			Handler:    _RemoteService_CaptureScreen_Handler,
		},
		{
			MethodName: "MouseClick",
			Handler:    _RemoteService_MouseClick_Handler,
		},
		{
			MethodName: "KeyTap",
			Handler:    _RemoteService_KeyTap_Handler,
		},
		{
			MethodName: "KeyListTap",
			Handler:    _RemoteService_KeyListTap_Handler,
		},
		{
			MethodName: "GetMousePosition",
			Handler:    _RemoteService_GetMousePosition_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _RemoteService_ListDir_Handler,
		},
		{
			MethodName: "ListDisk",
			Handler:    _RemoteService_ListDisk_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _RemoteService_ReadFile_Handler,
		},
		{
			MethodName: "ReadText",
			Handler:    _RemoteService_ReadText_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _RemoteService_CreateFile_Handler,
		},
		{
			MethodName: "CreateText",
			Handler:    _RemoteService_CreateText_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _RemoteService_Rename_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RemoteService_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _RemoteService_DeleteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testsuite_remote.proto",
}

func init() { proto.RegisterFile("testsuite_remote.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 862 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x16, 0xf5, 0xa0, 0xa8, 0x91, 0x94, 0xd2, 0x8b, 0xa4, 0x60, 0x85, 0xa2, 0x35, 0xf6, 0x50,
	0x38, 0x76, 0xed, 0xc0, 0x0a, 0x10, 0x14, 0x2d, 0xfa, 0x94, 0x9c, 0x34, 0x90, 0xe4, 0xba, 0x6b,
	0x01, 0x6d, 0x4e, 0x01, 0x2d, 0x4d, 0x69, 0x22, 0x24, 0x57, 0x25, 0x97, 0xb1, 0x79, 0xaa, 0x7b,
	0xed, 0xaf, 0x2e, 0x76, 0xc9, 0xa5, 0x28, 0xd9, 0x48, 0x74, 0xdb, 0x6f, 0x38, 0x8f, 0x6f, 0x66,
	0xbf, 0x59, 0xc2, 0xa7, 0x02, 0x13, 0x91, 0xa4, 0xbe, 0xc0, 0xb7, 0x31, 0x86, 0x5c, 0xe0, 0xc9,
	0x2a, 0xe6, 0x82, 0x13, 0x33, 0x47, 0x74, 0x02, 0x8d, 0x29, 0xf7, 0xc8, 0x21, 0xb4, 0xa7, 0xdc,
	0x9b, 0x67, 0x2b, 0x74, 0x8c, 0x7d, 0xe3, 0xe0, 0xd1, 0xd0, 0x3e, 0x29, 0xdc, 0xa7, 0xbf, 0xbd,
	0x7a, 0x3b, 0x7f, 0x73, 0x71, 0xc6, 0xb4, 0x03, 0x71, 0xa0, 0x3d, 0xe2, 0x91, 0xc0, 0x48, 0x38,
	0xf5, 0x7d, 0xe3, 0xa0, 0xc3, 0x34, 0xa4, 0x2d, 0x68, 0x9c, 0xfb, 0x01, 0xfd, 0xd7, 0x80, 0xfe,
	0xc8, 0x5d, 0x89, 0x34, 0xc6, 0x0b, 0x37, 0x76, 0xc3, 0x84, 0x7c, 0x01, 0xf0, 0x32, 0x0d, 0x82,
	0xcb, 0x45, 0x8c, 0x18, 0xa9, 0x0a, 0x16, 0xab, 0x58, 0x48, 0x0f, 0x8c, 0x5b, 0x95, 0xac, 0xc5,
	0x8c, 0x5b, 0x89, 0x32, 0xa7, 0x91, 0xa3, 0x4c, 0xa2, 0x1b, 0xa7, 0x99, 0xa3, 0x1b, 0x89, 0xae,
	0x9d, 0x56, 0x8e, 0xae, 0x25, 0x95, 0xdf, 0x53, 0x37, 0xf0, 0x45, 0xe6, 0x98, 0xca, 0xa6, 0x21,
	0x1d, 0x02, 0x8c, 0xc2, 0x25, 0xc3, 0xbf, 0x53, 0x4c, 0x04, 0xb1, 0xa1, 0x31, 0x0a, 0x97, 0xaa,
	0x70, 0x87, 0xc9, 0x23, 0x21, 0xd0, 0xfc, 0x39, 0xf6, 0x12, 0xa7, 0xbe, 0xdf, 0x38, 0xe8, 0x30,
	0x75, 0xa6, 0xff, 0xc0, 0xde, 0x8c, 0xa7, 0x09, 0x8e, 0x02, 0x7f, 0xf1, 0x4e, 0x87, 0x2a, 0x6a,
	0xc6, 0x06, 0xb5, 0xba, 0xa6, 0xb6, 0x0f, 0xdd, 0x31, 0x4f, 0xaf, 0x82, 0x3c, 0x42, 0x51, 0xb6,
	0x58, 0xd5, 0x44, 0xbe, 0x06, 0xf3, 0x97, 0x54, 0x08, 0x1e, 0xa9, 0x0e, 0x1e, 0x0d, 0x1f, 0xeb,
	0xb1, 0xaa, 0x42, 0xf9, 0xa7, 0x84, 0x15, 0x3e, 0x74, 0x0e, 0xb6, 0xb2, 0xcf, 0xf8, 0x7b, 0xdc,
	0xa5, 0xbe, 0x2d, 0x2f, 0xef, 0x46, 0xd5, 0xad, 0x33, 0x79, 0x94, 0x6d, 0xfd, 0xea, 0x7b, 0xd7,
	0xaa, 0x5a, 0x9d, 0xa9, 0x33, 0xfd, 0x11, 0xfa, 0x13, 0xcc, 0xe6, 0xee, 0x4a, 0xa7, 0x74, 0xa0,
	0x3d, 0xc1, 0x6c, 0xc4, 0x97, 0xf2, 0xb2, 0x65, 0xfb, 0x1a, 0x92, 0xc7, 0xd0, 0x1a, 0x63, 0xe0,
	0xe6, 0x25, 0xea, 0x2c, 0x07, 0xf4, 0x07, 0xd8, 0x9b, 0x60, 0x36, 0xf5, 0x13, 0x51, 0x49, 0xf2,
	0x14, 0x9a, 0x13, 0xcc, 0x12, 0x95, 0xa1, 0x3b, 0x7c, 0xa2, 0xfb, 0xda, 0xa8, 0xc4, 0x94, 0x0b,
	0x3d, 0x02, 0x6b, 0xca, 0x3d, 0x86, 0xab, 0x20, 0x23, 0x5f, 0x42, 0x73, 0xca, 0x3d, 0x1d, 0xd6,
	0x2d, 0x55, 0xc6, 0x3d, 0xa6, 0x3e, 0xd0, 0xef, 0xa1, 0xf3, 0x3a, 0x74, 0x3d, 0x1c, 0xbb, 0xc2,
	0x25, 0x9f, 0x43, 0x67, 0xee, 0x87, 0x78, 0x29, 0xdc, 0x70, 0xa5, 0x86, 0xd0, 0x60, 0x6b, 0x83,
	0x6c, 0x56, 0x7a, 0x29, 0xb2, 0x3d, 0xa6, 0xce, 0xf4, 0x08, 0xfa, 0x6a, 0x84, 0x17, 0x3c, 0xf1,
	0x85, 0xcf, 0xa3, 0x0f, 0xcd, 0x8f, 0xbe, 0x81, 0xce, 0x4b, 0x3f, 0xc0, 0xb3, 0x48, 0xc4, 0x99,
	0xec, 0xfd, 0x75, 0x32, 0xf6, 0xe3, 0x42, 0x9e, 0x39, 0x20, 0x03, 0xb0, 0xa4, 0x4e, 0xcf, 0xdd,
	0x10, 0x0b, 0xb5, 0x97, 0x58, 0x7e, 0x9b, 0xf1, 0x25, 0x4a, 0x42, 0xea, 0x0e, 0x1a, 0xac, 0xc4,
	0x74, 0x06, 0x50, 0xa6, 0x4e, 0x64, 0xee, 0x11, 0x4f, 0x23, 0x51, 0x10, 0xc9, 0x01, 0x79, 0x0a,
	0x66, 0xfe, 0x5d, 0xa9, 0xb0, 0x3b, 0xdc, 0xd3, 0xd3, 0x28, 0x23, 0x59, 0xe1, 0x40, 0xbf, 0x05,
	0x4b, 0x1a, 0xd5, 0x50, 0xaa, 0x94, 0x8c, 0x2d, 0x4a, 0x0f, 0x8c, 0xe4, 0xf0, 0x18, 0x2c, 0xbd,
	0xc4, 0xa4, 0x23, 0x2f, 0xf8, 0x2a, 0xf5, 0xec, 0x1a, 0xe9, 0x42, 0xfb, 0x0f, 0x37, 0x8e, 0xfc,
	0xc8, 0xb3, 0x0d, 0x69, 0x3f, 0x8b, 0x63, 0x1e, 0xdb, 0xf5, 0xc3, 0x05, 0xf4, 0xaa, 0xe2, 0x24,
	0x16, 0x34, 0xcf, 0x79, 0x84, 0x76, 0x8d, 0x00, 0x34, 0xa7, 0xf8, 0x97, 0xb0, 0xef, 0xee, 0x7e,
	0x22, 0x3d, 0x68, 0x31, 0xdf, 0xbb, 0x96, 0xe0, 0xce, 0x20, 0x7d, 0x30, 0x67, 0xfe, 0x72, 0x19,
	0xa0, 0x84, 0x75, 0xf2, 0x09, 0x58, 0x7f, 0xe6, 0xe1, 0xa7, 0xd2, 0xd0, 0xac, 0x18, 0x86, 0xd2,
	0x60, 0x0d, 0xff, 0x33, 0xa1, 0xcf, 0x54, 0xb3, 0x97, 0x18, 0xbf, 0xf7, 0x17, 0x48, 0x4e, 0xa1,
	0x7d, 0x76, 0x8b, 0x0b, 0xb5, 0x9b, 0x7a, 0x0e, 0xeb, 0x0d, 0x1e, 0xd8, 0x55, 0xa5, 0x48, 0x25,
	0xd1, 0x1a, 0xf9, 0xae, 0x7c, 0x66, 0x8a, 0x67, 0xa4, 0x54, 0xe1, 0xc6, 0xeb, 0x33, 0x28, 0xe7,
	0x5a, 0x0a, 0x8b, 0xd6, 0xc8, 0x0b, 0x80, 0xf5, 0xb2, 0x93, 0xcf, 0x36, 0xf6, 0xb2, 0xfa, 0x00,
	0x0c, 0xaa, 0x1a, 0xa5, 0x35, 0x72, 0x02, 0x66, 0xae, 0x71, 0xf2, 0xb0, 0xe6, 0xb7, 0xfd, 0x5f,
	0x00, 0xac, 0x97, 0x67, 0x5d, 0xe7, 0xde, 0x42, 0x6d, 0xc7, 0x7d, 0x03, 0xf6, 0x2b, 0x14, 0x9b,
	0x5a, 0x2e, 0x5d, 0xce, 0xfd, 0x60, 0xf0, 0x64, 0x83, 0xb2, 0xf6, 0xa1, 0x35, 0xf2, 0x1c, 0xda,
	0x32, 0xb5, 0x54, 0xef, 0x43, 0x93, 0x24, 0xf7, 0x54, 0x96, 0xd0, 0x1a, 0xf9, 0x0a, 0xac, 0x3c,
	0x28, 0x79, 0xb7, 0x59, 0x66, 0x8b, 0xd6, 0x10, 0x2c, 0x86, 0xee, 0x52, 0xc6, 0x7e, 0xf8, 0x9e,
	0xb4, 0x5c, 0x69, 0x8d, 0x1c, 0xe7, 0x31, 0x73, 0xbc, 0x15, 0x0f, 0xc6, 0x6c, 0x95, 0x38, 0x06,
	0x18, 0xc5, 0xe8, 0x0a, 0x54, 0x45, 0xee, 0x25, 0xdc, 0x76, 0x7f, 0xa6, 0xdd, 0x77, 0xcd, 0x7f,
	0x04, 0x26, 0xc3, 0x48, 0x6d, 0xcb, 0xc7, 0x9d, 0x9f, 0x01, 0x8c, 0x31, 0xc0, 0x82, 0xcc, 0x0e,
	0x01, 0xa7, 0xd0, 0x2b, 0x02, 0x78, 0xb0, 0xc4, 0x78, 0x87, 0x90, 0x2b, 0x53, 0xfd, 0x92, 0x9f,
	0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xf7, 0xe7, 0x33, 0xac, 0x07, 0x00, 0x00,
}
